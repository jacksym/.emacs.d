;; -*- mode: emacs-lisp; lexical-binding:t; coding: utf-8-emacs; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Thu Apr  8 10:37:44 2021
;; Desktop file format version 208
;; Emacs version 27.1

;; Global section:
(setq desktop-saved-frameset [frameset 1 (24687 5432 197404 303000) (desktop . "208") "jack@ajs-thinkpad" nil nil ((((minibuffer . t) (undecorated) (override-redirect) (font . "-pyrs-Monego-normal-normal-normal-*-19-*-*-*-m-0-iso10646-1") (font-parameter . "-pyrs-Monego-normal-normal-normal-*-19-*-*-*-m-0-iso10646-1") (border-width . 0) (internal-border-width . 1) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#f8f8f2") (background-color . "#282a36") (mouse-color . "black") (border-color . "black") (screen-gamma) (line-spacing) (left-fringe . 8) (right-fringe . 8) (no-special-glyphs) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 0) (tab-bar-lines . 0) (height . 42) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (inhibit-double-buffering) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 16) (scroll-bar-height . 16) (alpha) (no-focus-on-map) (no-accept-focus) (fullscreen . fullheight) (visibility . t) (skip-taskbar) (z-group) (display-type . color) (background-mode . dark) (cursor-color . "#ccccc7") (environment) (last-focus-update) (frameset--id . "9F01-2971-27E3-C3AB") (frameset--mini t . t) (tabs (current-tab (name . "test2.py") (explicit-name))) (modeline . t) (unsplittable) (icon-name) (display . ":0") (explicit-name) (user-size . t) (width . 85) (left + -10) (top . 19)) ((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 96) (min-pixel-width . 110) (min-pixel-height-ignore . 72) (min-pixel-width-ignore . 44) (min-pixel-height-safe . 24) (min-pixel-width-safe . 22)) leaf (pixel-width . 951) (pixel-height . 990) (total-width . 86) (total-height . 41) (normal-height . 1.0) (normal-width . 1.0) (buffer "params.dat" (selected . t) (hscroll . 0) (fringes 8 8 nil nil) (margins nil) (scroll-bars nil 0 t nil 0 t nil) (vscroll . 0) (dedicated) (point . 376) (start . 1)) (prev-buffers ("sym_ogle.py" 162 611))))])
(setq desktop-missing-file-warning nil)
(setq tags-file-name nil)
(setq tags-table-list nil)
(setq search-ring '(#("print" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("(" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #("when in the course of h" 0 23 (isearch-regexp-function nil isearch-case-fold-search t)) #("m" 0 1 (isearch-regexp-function nil isearch-case-fold-search t)) #("n" 0 1 (isearch-regexp-function nil isearch-case-fold-search t)) #("c" 0 1 (isearch-regexp-function nil isearch-case-fold-search t))))
(setq regexp-search-ring '(#("self" 0 4 (isearch-case-fold-search t)) #("cumu" 0 4 (isearch-case-fold-search nil))))
(setq register-alist '((106) (48 . #("#Bright Ogle\n#Jack Symonds \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import optimize\nimport data_proc as og\nimport os\n\npath = \"./ogle/\"\n\nevents = os.listdir(path)\n\ndef mag(t, A, u0, t0, tE):\n    u = np.sqrt(u0**2 + ((t-t0)/tE)**2)\n    m = (u**2 + 2)/(u * np.sqrt(u**2 + 4))\n    mag_mag = -np.log10(m)+1\n    return A * mag_mag\n\nevent_list = []\nfor event in events:\n    mags = np.loadtxt(path+event+\"/phot.dat\").transpose()[1]\n    # guess =  [np.mean(df[1]), np.ptp(df[1]), df[0][np.argmin(df[1])], 5]\n    A = np.mean(mags)\n    # params, parms_covariance = optimize.curve_fit(mag, df[0], df[1], guess)\n    # event_list.append([event, params[0]])\n    event_list.append([event, A])\n\nevent_list = sorted(event_list, key=lambda x: x[1])\ndims = event_list[0:10]\nbrights = event_list[-11:-1]\n\nprint(brights, dims)\n" 0 1 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-delimiter-face) 1 13 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-face) 13 14 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-delimiter-face) 14 28 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-face) 28 34 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 34 41 (yank-handler (evil-yank-line-handler nil t) fontified t) 41 43 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 43 47 (yank-handler (evil-yank-line-handler nil t) fontified t) 47 53 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 53 72 (yank-handler (evil-yank-line-handler nil t) fontified t) 72 74 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 74 79 (yank-handler (evil-yank-line-handler nil t) fontified t) 79 83 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 83 90 (yank-handler (evil-yank-line-handler nil t) fontified t) 90 96 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 96 106 (yank-handler (evil-yank-line-handler nil t) fontified t) 106 112 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 112 123 (yank-handler (evil-yank-line-handler nil t) fontified t) 123 125 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 125 129 (yank-handler (evil-yank-line-handler nil t) fontified t) 129 135 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 135 140 (yank-handler (evil-yank-line-handler nil t) fontified t) 140 144 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 144 147 (yank-handler (evil-yank-line-handler nil t) fontified t) 147 156 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-string-face) 156 158 (yank-handler (evil-yank-line-handler nil t) fontified t) 158 164 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 164 185 (yank-handler (evil-yank-line-handler nil t) fontified t) 185 188 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 188 189 (yank-handler (evil-yank-line-handler nil t) fontified t) 189 192 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-function-name-face) 192 216 (yank-handler (evil-yank-line-handler nil t) fontified t) 216 217 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 217 256 (yank-handler (evil-yank-line-handler nil t) fontified t) 256 257 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 257 299 (yank-handler (evil-yank-line-handler nil t) fontified t) 299 306 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 306 328 (yank-handler (evil-yank-line-handler nil t) fontified t) 328 334 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 334 348 (yank-handler (evil-yank-line-handler nil t) fontified t) 348 358 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 358 364 (yank-handler (evil-yank-line-handler nil t) fontified t) 364 367 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 367 374 (yank-handler (evil-yank-line-handler nil t) fontified t) 374 376 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 376 389 (yank-handler (evil-yank-line-handler nil t) fontified t) 389 393 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 393 418 (yank-handler (evil-yank-line-handler nil t) fontified t) 418 429 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-string-face) 429 450 (yank-handler (evil-yank-line-handler nil t) fontified t) 450 452 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-delimiter-face) 452 500 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-face) 500 521 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-face) 521 525 (yank-handler (evil-yank-line-handler nil t) fontified t) 525 526 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 526 547 (yank-handler (evil-yank-line-handler nil t) fontified t) 547 549 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-delimiter-face) 549 621 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-face) 621 625 (yank-handler (evil-yank-line-handler nil t) fontified t) 625 627 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-delimiter-face) 627 665 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-comment-face) 665 700 (yank-handler (evil-yank-line-handler nil t) fontified t) 700 710 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 710 713 (yank-handler (evil-yank-line-handler nil t) fontified t) 713 719 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-builtin-face) 719 736 (yank-handler (evil-yank-line-handler nil t) fontified t) 736 742 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 742 752 (yank-handler (evil-yank-line-handler nil t) fontified t) 752 756 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 756 776 (yank-handler (evil-yank-line-handler nil t) fontified t) 776 783 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-variable-name-face) 783 806 (yank-handler (evil-yank-line-handler nil t) fontified t) 806 811 (yank-handler (evil-yank-line-handler nil t) fontified t face font-lock-keyword-face) 811 827 (yank-handler (evil-yank-line-handler nil t) fontified t))) (104 file . "~/pyhe/he.py") (101 file . "~/.emacs.d/early-init.el") (105 file . "~/.emacs.d/init.el")))
(setq file-name-history '(#("/home/jack/prj/data_proc.py" 0 27 (ivy-index 2)) #("/home/jack/prj/bright_ogle.py" 0 29 (ivy-index 0)) #("/home/jack/prj/sym_ogle.py" 0 26 (ivy-index 0)) #("/home/jack/.emacs.d/init.el" 0 27 (ivy-index 1)) #("/home/jack/prj/test2.py" 0 23 (ivy-index 2)) #("/home/jack/prj/dataN" 0 20 (ivy-index 0)) #("/home/jack/prj/fe.py" 0 20 (ivy-index 0)) #("/home/jack/.emacs.d/" 0 20 (ivy-index 0)) #("/home/jack/prj/test.py" 0 22 (ivy-index 8)) #("/home/jack/prj/notes.org" 0 24 (ivy-index 0)) #("/home/jack/prj/review.tex" 0 25 (ivy-index 6)) #("/home/jack/prj/project.tex" 0 26 (ivy-index 0)) #("/home/jack/.emacs.d/early-init.el" 0 33 (ivy-index 0)) #("/home/jack/temacs.org" 0 21 (ivy-index 0))))

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/jack/prj/ogle/blg-0001/params.dat"
  "params.dat"
  'fundamental-mode
  '(visual-line-mode ivy-mode which-key-mode)
  376
  '(358 t)
  t
  nil
  '((buffer-display-time 24685 57605 552877 396000) (buffer-file-coding-system . undecided-unix) (overwrite-mode) (truncate-lines))
  '((mark-ring nil)))

(desktop-create-buffer 208
  "/home/jack/prj/sym_ogle.py"
  "sym_ogle.py"
  'python-mode
  '(visual-line-mode eldoc-mode ivy-mode which-key-mode)
  611
  '(759 nil)
  nil
  nil
  '((tab-width . 8) (indent-tabs-mode) (buffer-display-time 24685 57605 548948 425000) (buffer-file-coding-system . utf-8-unix) (overwrite-mode) (truncate-lines . t))
  '((mark-ring nil)))

(desktop-create-buffer 208
  nil
  ".emacs.d"
  'dired-mode
  '(visual-line-mode ivy-mode which-key-mode)
  607
  '(nil nil)
  t
  '("/home/jack/.emacs.d/")
  '((buffer-display-time 24685 57605 547834 615000) (overwrite-mode) (truncate-lines))
  '((mark-ring nil)))

